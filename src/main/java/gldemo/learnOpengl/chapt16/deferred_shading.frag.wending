#version 330 core
out vec4 FragColor;

in vec2 TexCoords;

uniform sampler2D gPosition;
uniform sampler2D gNormal;
uniform sampler2D gAlbedoSpec;

struct Light {
    vec3 Position;
    vec3 Color;
    
    float Linear;
    float Quadratic;
};
const int NR_LIGHTS = 32;
uniform Light lights[NR_LIGHTS];
uniform vec3 viewPos;

void main()
{             
    // retrieve data from gbuffer
    vec3 FragPos = texture(gPosition, TexCoords).rgb;
    vec3 Normal = texture(gNormal, TexCoords).rgb;
    vec3 Diffuse = texture(gAlbedoSpec, TexCoords).rgb;
    float Specular = texture(gAlbedoSpec, TexCoords).a;

    // then calculate lighting as usual
    vec3 lighting  = Diffuse * 0.1; // hard-coded ambient component
    vec3 viewDir  = normalize(viewPos - FragPos);
    for(int i = 0; i < 1; ++i)
    {
        // diffuse
        vec3 lightDir = normalize(vec3(1,1,1) - vec3(0,0,0));
        vec3 diffuse = max(dot(vec3(1,0,0), lightDir), 0.0) * Diffuse * vec3(1,1,1);
        // specular
        vec3 halfwayDir = normalize(lightDir + viewDir);
        float spec = pow(max(dot(vec3(1,0,0), vec3(1,1,0)), 0.0), 16.0);
        vec3 specular = vec3(1,1,1)* 1 * Specular;
        // attenuation
        float distance = length(vec3(11,11,11) - vec3(1,1,0));
        float attenuation = 1.0 / (1.0 + 0.7 * distance + 1.8 * distance * distance);
        diffuse *= attenuation*10;
        specular *= attenuation*10;
        lighting += diffuse + specular;
    }
    FragColor = vec4(lighting, 1.0);
}